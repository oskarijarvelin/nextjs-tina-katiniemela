# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
  settings(relativePath: String): Settings!
  settingsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: SettingsFilter): SettingsConnection!
}

input DocumentFilter {
  page: PageFilter
  settings: SettingsFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter): DocumentConnection!
}

union DocumentNode = Page | Settings

type PageBlocksHero {
  otsikko: String!
  sisalto: String
  bgImg: String
  kuvateksti: String
}

type PageBlocksKuva {
  img: String
  kuva_kuvateksti: String
}

type PageBlocksPalstaPalsta_linkit {
  url: String
  title: String
}

type PageBlocksPalsta {
  palsta_kuva: String
  palsta_kuvateksti: String
  palsta_reverse: Boolean
  palsta_otsikko: String
  palsta_sisalto: JSON
  palsta_linkit: [PageBlocksPalstaPalsta_linkit]
}

union PageBlocks = PageBlocksHero | PageBlocksKuva | PageBlocksPalsta

type Page implements Node & Document {
  title: String!
  description: String
  blocks: [PageBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input PageBlocksHeroFilter {
  otsikko: StringFilter
  sisalto: StringFilter
  bgImg: ImageFilter
  kuvateksti: StringFilter
}

input PageBlocksKuvaFilter {
  img: ImageFilter
  kuva_kuvateksti: StringFilter
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PageBlocksPalstaPalsta_linkitFilter {
  url: StringFilter
  title: StringFilter
}

input PageBlocksPalstaFilter {
  palsta_kuva: ImageFilter
  palsta_kuvateksti: StringFilter
  palsta_reverse: BooleanFilter
  palsta_otsikko: StringFilter
  palsta_sisalto: RichTextFilter
  palsta_linkit: PageBlocksPalstaPalsta_linkitFilter
}

input PageBlocksFilter {
  hero: PageBlocksHeroFilter
  kuva: PageBlocksKuvaFilter
  palsta: PageBlocksPalstaFilter
}

input PageFilter {
  title: StringFilter
  description: StringFilter
  blocks: PageBlocksFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type SettingsMainnavNav {
  url: String
  title: String
}

type SettingsMainnav {
  nav: [SettingsMainnavNav]
}

type Settings implements Node & Document {
  title: String!
  sivuston_nimi: String
  instagram_url: String
  linkedin_url: String
  mainnav: SettingsMainnav
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input SettingsMainnavNavFilter {
  url: StringFilter
  title: StringFilter
}

input SettingsMainnavFilter {
  nav: SettingsMainnavNavFilter
}

input SettingsFilter {
  title: StringFilter
  sivuston_nimi: StringFilter
  instagram_url: StringFilter
  linkedin_url: StringFilter
  mainnav: SettingsMainnavFilter
}

type SettingsConnectionEdges {
  cursor: String!
  node: Settings
}

type SettingsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SettingsConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updateSettings(relativePath: String!, params: SettingsMutation!): Settings!
  createSettings(relativePath: String!, params: SettingsMutation!): Settings!
}

input DocumentMutation {
  page: PageMutation
  settings: SettingsMutation
}

input PageBlocksHeroMutation {
  otsikko: String
  sisalto: String
  bgImg: String
  kuvateksti: String
}

input PageBlocksKuvaMutation {
  img: String
  kuva_kuvateksti: String
}

input PageBlocksPalstaPalsta_linkitMutation {
  url: String
  title: String
}

input PageBlocksPalstaMutation {
  palsta_kuva: String
  palsta_kuvateksti: String
  palsta_reverse: Boolean
  palsta_otsikko: String
  palsta_sisalto: JSON
  palsta_linkit: [PageBlocksPalstaPalsta_linkitMutation]
}

input PageBlocksMutation {
  hero: PageBlocksHeroMutation
  kuva: PageBlocksKuvaMutation
  palsta: PageBlocksPalstaMutation
}

input PageMutation {
  title: String
  description: String
  blocks: [PageBlocksMutation]
}

input SettingsMainnavNavMutation {
  url: String
  title: String
}

input SettingsMainnavMutation {
  nav: [SettingsMainnavNavMutation]
}

input SettingsMutation {
  title: String
  sivuston_nimi: String
  instagram_url: String
  linkedin_url: String
  mainnav: SettingsMainnavMutation
}

schema {
  query: Query
  mutation: Mutation
}
  